@mixin create-columns($column, $number-of-columns) {
  @for $column-number from 1 through $number-of-columns {
    .#{$column}-#{$column-number} {
      --col-size-with-gap: #{column-with-gap($grid_gutter, $number-of-columns, $column-number)};
      --col-size-without-gap: #{column-without-gap($number-of-columns, $column-number)};
    }
    .#{$column}-offset-#{$column-number} {
      --offset-with-gap: #{offset-with-gap($grid_gutter, $number-of-columns, $column-number)};
      --offset-without-gap: #{offset-without-gap($number-of-columns, $column-number)};
    }
    .#{$column}-order-#{$column-number} {
      order: $column-number;
    }
  }
}

@mixin display($prefix) {
  .#{$prefix}-display- {
    &row {
      display: flex;
      flex-direction: row;

      &-reverse {
        display: flex;
        flex-direction: row-reverse;
      }
    }

    &column {
      display: flex;
      flex-direction: column;

      &-reverse {
        display: flex;
        flex-direction: column-reverse;
      }
    }

    &none {
      display: none;
    }

    &block {
      display: block;
    }
  }
}

@mixin flex($prefix) {
  [class*="-display-column"],
  [class*="-display-row"] {
    &.#{$prefix}-align {
      &-stretch {
        align-items: stretch;
      }

      &-end {
        align-items: flex-end;
      }

      &-start {
        align-items: flex-start;
      }

      &-center {
        align-items: center;
      }
    }

    &.#{$prefix}-justify {
      &-strech {
        justify-content: stretch;
      }

      &-end {
        justify-content: flex-end;
      }

      &-start {
        justify-content: flex-start;
      }

      &-center {
        justify-content: center;
      }

      &-between {
        justify-content: space-between;
      }

      &-around {
        justify-content: space-around;
      }

      &-evenly {
        justify-content: space-evenly;
      }
    }

    &.#{$prefix}-wrap {
      flex-wrap: wrap;
    }

    &.#{$prefix}-gap {
      & > [class*='-col-'] {
        width: var(--col-size-with-gap);

        &:not(:last-child) {
          margin: {
            right: $grid_gutter;
          };
        }
      }

      & > [class*='-offset-'] {
        margin-left: var(--offset-with-gap);
      }
    }

    &[class*='-gap'] > [class*='-col-'] {
      &.#{$prefix}-remove-gap {
        margin: {
          right: 0;
        };
      }

      &.#{$prefix}-restore-gap {
        margin: {
          right: $grid_gutter;
        };
      }
    }
  }
}

@mixin utilities($prefix, $space) {
  .#{$prefix}-fit-content {
    width: fit-content;
  }
  .#{$prefix}-text- {
    &left {
      text-align: left;
    }

    &right {
      text-align: right;
    }

    &center {
      text-align: center;
    }
  }
  .#{$prefix}-position- {
    &absolute {
      position: absolute;
    }

    &static {
      position: static;
    }

    &relative {
      position: relative;
    }

    &sticky {
      position: sticky;
    }

    &fixed {
      position: fixed;
    }
  }
  .#{$prefix}-pull {
    float: left;
  }
  .#{$prefix}-push {
    float: right;
  }
  .#{$prefix}-clear:after {
    content: "";
    display: table;
    clear: both;
  }
  @for $i from 0 through ($number-of-columns * 2) {
    .#{$prefix}-m {
      &-#{$i} {
        margin: $space * $i;
      }

      &b-#{$i} {
        margin: {
          bottom: $space * $i;
        };
      }

      &t-#{$i} {
        margin: {
          top: $space * $i;
        };
      }

      &l-#{$i} {
        margin: {
          left: $space * $i;
        };
      }

      &r-#{$i} {
        margin: {
          right: $space * $i;
        };
      }
    }
    .#{$prefix}-p {
      &-#{$i} {
        padding: $space * $i;
      }

      &b-#{$i} {
        padding: {
          bottom: $space * $i;
        };
      }

      &t-#{$i} {
        padding: {
          top: $space * $i;
        };
      }

      &l-#{$i} {
        padding: {
          left: $space * $i;
        };
      }

      &r-#{$i} {
        padding: {
          right: $space * $i;
        };
      }
    }
  }
}

